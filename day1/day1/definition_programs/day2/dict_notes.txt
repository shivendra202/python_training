1. Using get() to Access Values

The get() method is useful for safely accessing dictionary values. It allows you to provide a default value if the key does not exist.

data = {'name': 'nakul', 'age': 30, 'city': 'chamba'}

# Access existing key
print(data.get('name'))  # Output: nakul

# Access non-existing key with a default value
print(data.get('country', 'Unknown'))  # Output: Unknown

Trick: Unlike direct key access (data['country']), get() does not raise a KeyError if the key is missing.

2. Using update() to Merge Dictionaries

The update() method is used to merge another dictionary into the current one, updating existing keys with new values.

data = {'name': 'bheem', 'age': 30}

# Dictionary to merge
new_info = {'city': 'chandigarh', 'age': 31}

# Update data with new_info
data.update(new_info)

print(data)  # Output: {'name': 'bheem', 'age': 31, 'city': 'ramgarh'}

Trick: If the key exists in both dictionaries, the value from the dictionary passed to update() will overwrite the existing value.

3. Using pop() to Remove Items

The pop() method removes a key-value pair from the dictionary and returns the value. If the key is not found, it raises a `KeyError` unless a default value is provided.

data = {'name': 'akash', 'age': 35, 'city': 'chandigarh'}

# Remove and return value for the key 'age'
age = data.pop('age')

print(age)     
print(data)

# Attempt to remove a non-existing key with a default value
city = data.pop('country', 'Not Found')
print(city) 

Trick: pop() is useful for both removing and retrieving values. Providing a default prevents errors for missing keys.

Using keys(), values(), and items()

These methods are used to retrieve view objects of dictionary keys, values, and key-value pairs, respectively.

data = {'name': 'Alice', 'age': 30, 'city': 'Wonderland'}

# Get all keys
keys = data.keys()
print(keys)  # Output: dict_keys(['name', 'age', 'city'])

# Get all values
values = data.values()
print(values)  # Output: dict_values(['Alice', 30, 'Wonderland'])

# Get all key-value pairs
items = data.items()
print(items)  # Output: dict_items([('name', 'Alice'), ('age', 30), ('city', 'Wonderland')])

# Convert to list if needed
print(list(keys)) 
print(list(values)) 
print(list(items))

Trick: These view objects are dynamic and reflect changes to the dictionary.

Using setdefault() to Set Default Values

The setdefault() method returns the value of a key if it exists; if not, it sets the key with a specified default value and returns that value.

data = {'name': 'mahesh', 'age': 37}

# Get value for 'city', setting it to 'Unknown' if it doesn't exist
name = data.setdefault('name', 'my_name')
city = data.setdefault('city', 'Unknown')

print(name)
print(city)  
print(data) 

# Using .setdefault() on an existing key does not change its value
age = data.setdefault('age', 25)
print(age) 

setdefault() is useful for initializing dictionary keys with default values when working with data where some keys may be missing.

These examples should give you a solid understanding of how to manipulate and interact with Python dictionaries using various methods.
------------------------------------------------------
Dictionary operations, comprehensions, and manipulations:

1. Merging Dictionaries with {**dict1, **dict2}

You might know that you can merge two dictionaries using the update() method, but there's also a more concise way to do this:

dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}

merged = {**dict1, **dict2}
print(merged)  # Output: {'a': 1, 'b': 3, 'c': 4}

Trick: This syntax is a shorthand for merging dictionaries in Python 3.5 and later. If keys overlap, the values from the latter dictionary (dict2) will overwrite those from the former (dict1).
----------------
2. Dictionary Comprehensions with Conditional Expressions

Using dictionary comprehensions, you can filter and transform data in a concise way:

data = {'a': 1, 'b': 2, 'c': 3, 'd': 4}

# Create a new dictionary with squared values for even keys
result = {k: v**2 for k, v in data.items() if v % 2 == 0}
print(result)  # Output: {'b': 4, 'd': 16}

Trick: This snippet demonstrates how to filter and modify dictionary items in one line using comprehensions with conditional logic.

3. Default Dictionary with defaultdict

The "defaultdict" from the "collections" module can be tricky if you're not familiar with it:

from collections import defaultdict

# Initialize defaultdict with int, which defaults to 0
d = defaultdict(int)

d['a'] += 1 # d['a'] = d['a'] + 1
d['b'] += 2

print(d)  # Output: defaultdict(<class 'int'>, {'a': 1, 'b': 2})
print(d['c'])  # Output: 0 (default value for missing keys)

Trick: "defaultdict" automatically initializes missing keys with a default value, making it easier to handle missing entries without additional checks.

4. Dictionary with Tuple Keys

Dictionaries can use tuples as keys, but the tuples must be immutable:

data = {('a', 1): 'first', ('b', 2): 'second'}

print(data[('a', 1)])  # Output: first

# Trying to use a list as a key will raise a TypeError
# data[[1, 2]] = 'error'  # Uncommenting this line will cause an error

Trick: Tuples can be used as dictionary keys if they are immutable, but lists cannot be used as dictionary keys because they are mutable.

5. Nested Dictionary Comprehensions

You can nest dictionary comprehensions for more complex data transformations:

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Create a dictionary where each key is a row index and each value is a dictionary of column indices and their values
result = {i: {j: matrix[i][j] for j in range(len(matrix[i]))} for i in range(len(matrix))}

print(result)  # Output: {0: {0: 1, 1: 2, 2: 3}, 1: {0: 4, 1: 5, 2: 6}, 2: {0: 7, 1: 8, 2: 9}}

Trick: This snippet demonstrates how to use nested dictionary comprehensions to create complex, multi-level dictionary structures.